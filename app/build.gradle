import io.audioshinigami.superd.buildsrc.AndroidBuildConfig
import io.audioshinigami.superd.buildsrc.Libs

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'

android {

    compileSdkVersion AndroidBuildConfig.target_sdk_version

    defaultConfig {
        applicationId "io.audioshinigami.superd"
        minSdkVersion AndroidBuildConfig.min_sdk_version
        targetSdkVersion AndroidBuildConfig.target_sdk_version
        versionCode AndroidBuildConfig.version_code
        versionName AndroidBuildConfig.version_name
        testInstrumentationRunner AndroidBuildConfig.testInstrumentationRunner
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }


    buildTypes {

        release {
            // code shrinking, obfuscation & optimisation
            minifyEnabled true
            // resource shrinking
            shrinkResources true

            applicationIdSuffix ".alpha"

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            resValue "string", "my_name", "Super D-debug"

            minifyEnabled false
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        beta {
            applicationIdSuffix ".alpha"
            versionNameSuffix "-beta"
            resValue "string", "my_name", "Super D-beta"

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        alpha {
            minifyEnabled true
            applicationIdSuffix ".alpha"
            versionNameSuffix "-alpha"
            resValue "string", "my_name", "Super alpha"
        }
    }
    packagingOptions {
        exclude 'README.txt'
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests {
        includeAndroidResources = true
        returnDefaultValues = true

        all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    configurations.all {
        resolutionStrategy {
            force Libs.AndroidX.Test.testMonitor
        }
    }

    buildFeatures {
        dataBinding = true
    }


    kotlinOptions {
        jvmTarget = '1.8'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes.each {
        // get twitter API key & secret from local.prop
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newInputStream())
        def key = properties.getProperty("api_key", "")
        def secret = properties.getProperty("api_secret", "")

        it.buildConfigField 'String', "API_KEY", key
        it.buildConfigField 'String', "API_SECRET", secret
    }
}

/*
 * MIT License
 *
 * Copyright (c) 2020  David Osemwota
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // Kotlin
    implementation Libs.Kotlin.stdlib
    // Room Db
    implementation Libs.AndroidX.Room.runtime
    implementation Libs.AndroidX.Room.ktx
    kapt Libs.AndroidX.Room.compiler
    // Navigation
    implementation Libs.AndroidX.Navigation.navigationFragment
    implementation Libs.AndroidX.Navigation.navigationUi
    // Constraint layout
    implementation Libs.AndroidX.constraintLayout
    // Coroutine
    implementation Libs.Coroutines.android
    implementation Libs.Coroutines.core
    //Paging
    implementation Libs.AndroidX.Paging.paging
    // Material
    implementation Libs.material
    // Appcompat
    implementation Libs.AndroidX.appcompat
    // sharedPreference
    implementation Libs.AndroidX.sharedPreference
    // RecyclerView
    implementation Libs.AndroidX.RecyclerView.recyclerView
    // Lifecycle
    implementation Libs.AndroidX.Lifecycle.viewmodel
    implementation Libs.AndroidX.Lifecycle.livedataKtx
    // Fetch2
    implementation Libs.fetch
    // Timber
    implementation Libs.timber
    // Dagger2
    implementation Libs.Dagger2.dagger
    kapt Libs.Dagger2.compiler
    // Twitter kit
    implementation(Libs.twitterKit){
        transitive = true
    }
    // MultiDex
    implementation Libs.multidex

    // Unit tests
    testImplementation Libs.AndroidX.Test.core
    testImplementation Libs.AndroidX.Test.rules
    testImplementation Libs.AndroidX.Test.junitKtx
    testImplementation Libs.AndroidX.Test.coreTesting
    // Coroutines
    testImplementation Libs.Coroutines.android
    testImplementation Libs.Coroutines.test
    testImplementation Libs.truth
    // Robolectric
    testImplementation Libs.robolectric
    // Mockito
    testImplementation Libs.mockito
    testImplementation Libs.mockitoDexMaker
    // Hamcrest
    testImplementation Libs.Hamcrest.hamcrest
    testImplementation Libs.Hamcrest.hamcrestLib

    kaptTest Libs.Dagger2.testCompiler

    // Android tests
    androidTestImplementation Libs.AndroidX.Test.core
    androidTestImplementation Libs.AndroidX.Test.rules
    androidTestImplementation Libs.AndroidX.Test.junitKtx
    androidTestImplementation Libs.AndroidX.Test.coreTesting
    //  navigation testing
    androidTestImplementation Libs.AndroidX.Navigation.navigationTesting
    // Room
    androidTestImplementation Libs.AndroidX.Room.test
    // Mockito
    androidTestImplementation Libs.mockito
    androidTestImplementation Libs.mockitoDexMaker
    // Coroutines
    androidTestImplementation Libs.Coroutines.test
    androidTestImplementation Libs.Hamcrest.hamcrest
    androidTestImplementation Libs.Hamcrest.hamcrestLib
    // Espresso
    androidTestImplementation Libs.AndroidX.Test.espressoCore

    debugImplementation Libs.AndroidX.Test.fragmentTesting
}
